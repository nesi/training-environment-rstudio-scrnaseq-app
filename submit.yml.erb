
<%
   user = OodSupport::User.new
   services_node = Resolv.getaddress("servicesnode")
%>
---
batch_connect:
  template: "basic"
  conn_params:
    - csrf_token
script:
  wall_time: "<%= wall_time.to_i * 3600 %>"
  native:
    container:
      name: "scrnaseq"
      image: "ghcr.io/nesi/training-environment-rstudio-scrnaseq-app:v2024.04"
      command: ["/bin/bash","-l","<%= staged_root %>/job_script_content.sh"]
      restart_policy: 'OnFailure'
      env:
        TZ: "Pacific/Auckland"
      port: "8080"
      cpu: "<%= cpu %>"
      memory: "<%= memory %>Gi"
    mounts:
      - type: nfs
        name: home
        host: <%= services_node %>
        path: /srv/homes
        destination_path: /home/shared
      - type: host
        name: nslcd-socket
        host_type: Socket
        path: /var/run/nslcd/socket
        destination_path: /var/run/nslcd/socket
      - type: host
        name: nsswitch-conf
        host_type: File
        path: /etc/nsswitch.conf
        destination_path: /etc/nsswitch.conf
    configmap:
      files:
        - filename: "logging.conf"
          data: |
            [*]
            log-level=debug
            logger-type=file
            log-dir=<%= staged_root %>/logs
          mount_path: '/etc/rstudio'
        - filename: "database.conf"
          data: |
            directory=/tmp/lib/rstudio-server
          mount_path: '/etc/rstudio/database'
        - filename: 'k8_helper'
          data: |
            #!/usr/bin/env bash

            set -x

            KEY=$1
            VALUE=$(echo -n $2 | base64)
            CFG="$(hostname)-secret"

            kubectl get secret ${CFG} -o json | jq --arg key $KEY --arg value $VALUE '.data[$key] = $value'  | kubectl apply -f -
          mount_path: '/opt/open_ondemand/helpers'